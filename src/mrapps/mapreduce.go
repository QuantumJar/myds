package mrapps

import (
	"strconv"
	"strings"
)

type KeyValue struct {
	Key   string
	Value string
}

/*
	Map函数：takes an input pair and produces a set of intermediate key/value pairs.

这里的参数一个是文件名，这个没有特别的作用，一个是文件的内容,返回值就是需要生成的中间键值对
*/
func Map(filename, content string) []KeyValue {
	//把内容分隔为单词的切片
	words := strings.FieldsFunc(content, func(r rune) bool {
		return !('a' <= r && r <= 'z' || 'A' <= r && r <= 'Z')
	})

	//把所有的中间键值对收集为一个大的切片
	intermediateKeyList := make([]KeyValue, 10)
	for _, word := range words {
		kv := KeyValue{word, "1"}
		intermediateKeyList = append(intermediateKeyList, kv)
	}

	return intermediateKeyList
}

// Reduce :把这个中间键值对reduce为一个更小的最终键值对，把其中所有具有相同key的元素合并为一个
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []KeyValue) string {

	return strconv.Itoa(len(values))
}
